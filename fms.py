# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FileManagementSystem.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import *
import easygui
import shutil
from tkinter import filedialog
from tkinter import messagebox as mb
import os

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1097, 837)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(0, 0, 1101, 831))
        self.label.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(200, 50, 611, 81))
        self.label_2.setObjectName("label_2")
        self.fileOpen = QtWidgets.QPushButton(Dialog)
        self.fileOpen.setGeometry(QtCore.QRect(130, 140, 201, 51))
        self.fileOpen.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.fileOpen.setObjectName("fileOpen")
        self.fileCopy = QtWidgets.QPushButton(Dialog)
        self.fileCopy.setGeometry(QtCore.QRect(130, 270, 201, 51))
        self.fileCopy.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.fileCopy.setObjectName("fileCopy")
        self.delFile = QtWidgets.QPushButton(Dialog)
        self.delFile.setGeometry(QtCore.QRect(130, 400, 201, 51))
        self.delFile.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.delFile.setObjectName("delFile")
        self.fileRename = QtWidgets.QPushButton(Dialog)
        self.fileRename.setGeometry(QtCore.QRect(130, 550, 201, 51))
        self.fileRename.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.fileRename.setObjectName("fileRename")
        self.moveFile = QtWidgets.QPushButton(Dialog)
        self.moveFile.setGeometry(QtCore.QRect(700, 160, 201, 51))
        self.moveFile.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.moveFile.setObjectName("moveFile")
        self.RemoveFolder = QtWidgets.QPushButton(Dialog)
        self.RemoveFolder.setGeometry(QtCore.QRect(700, 280, 201, 51))
        self.RemoveFolder.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.RemoveFolder.setObjectName("RemoveFolder")
        self.makeFolder = QtWidgets.QPushButton(Dialog)
        self.makeFolder.setGeometry(QtCore.QRect(700, 420, 201, 51))
        self.makeFolder.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.makeFolder.setObjectName("makeFolder")
        self.fileDirectory = QtWidgets.QPushButton(Dialog)
        self.fileDirectory.setGeometry(QtCore.QRect(660, 560, 241, 51))
        self.fileDirectory.setStyleSheet("color: black;\n"
"background-color: rgb(190, 159, 35);\n"
"font: 14pt \"MS Shell Dlg 2\";\n"
"border-radius: 15px ;")
        self.fileDirectory.setObjectName("fileDirectory")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_2.setText(_translate("Dialog", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#00ff00;\">Kishore\'s File management System</span></p></body></html>"))
        self.fileOpen.setText(_translate("Dialog", "Opening a file"))
        self.fileOpen.clicked.connect(self.open_file)
        self.fileCopy.setText(_translate("Dialog", "Copy a file"))
        self.fileCopy.clicked.connect(self.copy_file)
        self.delFile.setText(_translate("Dialog", "Delete a file"))
        self.delFile.clicked.connect(self.delete_file)
        self.fileRename.setText(_translate("Dialog", "Rename a file."))
        self.fileRename.clicked.connect(self.rename_file)
        self.moveFile.setText(_translate("Dialog", "Move a File."))
        self.moveFile.clicked.connect(self.move_file)
        self.RemoveFolder.setText(_translate("Dialog", "Remove a folder"))
        self.RemoveFolder.clicked.connect(self.remove_folder)
        self.makeFolder.setText(_translate("Dialog", "Make a folder"))
        self.makeFolder.clicked.connect(self.make_folder)
        self.fileDirectory.setText(_translate("Dialog", "List all files in directory"))
        self.fileDirectory.clicked.connect(self.list_files)
    # open a file box window
    # when we want to select a file
    def open_window(self):
        read = easygui.fileopenbox()
        return read

    # open file function
    def open_file(self):
        string = self.open_window()
        try:
            os.startfile(string)
        except:
            mb.showinfo('confirmation', "File not found!")

    # copy file function
    def copy_file(self):
        try:
            source1 = self.open_window()
            destination1 = filedialog.askdirectory()
            shutil.copy(source1, destination1)
            mb.showinfo('confirmation', "File Copied !")
        except:
            mb.showinfo('confirmation', "Process cancelled")
    # delete file function
    def delete_file(self):
        try:
            del_file = self.open_window()
            if os.path.exists(del_file):
                os.remove(del_file)
            else:
                mb.showinfo('confirmation', "File not found !")
        except:
            mb.showinfo('confirmation', "Processed cancelled")
    # rename file function
    def rename_file(self):
        try:
            chosenFile = self.open_window()
            path1 = os.path.dirname(chosenFile)
            extension = os.path.splitext(chosenFile)[1]
            print("Enter new name for the chosen file")
            newName = input()
            path = os.path.join(path1, newName + extension)
            print(path)
            os.rename(chosenFile, path)
            mb.showinfo('confirmation', "File Renamed !")
        except:
            mb.showinfo('confirmation', "Processed cancelled")
    # move file function
    def move_file(self):
        try:
            source = self.open_window()
            destination = filedialog.askdirectory()
            if (source == destination):
                mb.showinfo('confirmation', "Source and destination are same")
            else:
                shutil.move(source, destination)
                mb.showinfo('confirmation', "File Moved !")
        except:
            mb.showinfo('confirmation', "Processed cancelled")
    # function to make a new folder
    def make_folder(self):
        try:
            newFolderPath = filedialog.askdirectory()
            print("Enter name of new folder")

            newFolder = input()
            path = os.path.join(newFolderPath, newFolder)

            os.mkdir(path)
            mb.showinfo('confirmation', "Folder created !")
        except:
            mb.showinfo('confirmation', "Processed cancelled")
    # function to remove a folder
    def remove_folder(self):
        try:
            delFolder = filedialog.askdirectory()
            os.rmdir(delFolder)
            mb.showinfo('confirmation', "Folder Deleted !")
        except:
            mb.showinfo('confirmation', "Processed cancelled")
    # function to list all the files in folder
    def list_files(self):
        try:
            folderList = filedialog.askdirectory()
            sortlist = sorted(os.listdir(folderList))
            i = 0
            print("Files in ", folderList, "folder are:")
            while (i < len(sortlist)):
                print(sortlist[i] + '\n')
                i += 1
        except:
            mb.showinfo('confirmation', "Exiting the process")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
